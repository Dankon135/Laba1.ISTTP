// <auto-generated />
using System;
using LibraryInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryInfrastructure.Migrations
{
    [DbContext(typeof(DblibraryContext))]
    [Migration("20240316165318_UpdateDatabaseSchema1")]
    partial class UpdateDatabaseSchema1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryDomain.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LibraryDomain.Model.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentId")
                        .HasColumnType("int")
                        .HasColumnName("Departament_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentId");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("LibraryDomain.Model.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("DepartamentId")
                        .HasColumnType("int")
                        .HasColumnName("Departament_ID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Full_Name");

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int")
                        .HasColumnName("Laboratory_ID");

                    b.Property<DateOnly>("PositionEnd")
                        .HasColumnType("date")
                        .HasColumnName("Position_End");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("Position_ID");

                    b.Property<DateOnly>("PositionStart")
                        .HasColumnType("date")
                        .HasColumnName("Position_Start");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("PositionId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("LibraryDomain.Model.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("LibraryDomain.Model.ResearcherWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Contribution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("CreatedAt")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Created_At");

                    b.Property<int>("ResearcherId")
                        .HasColumnType("int")
                        .HasColumnName("Researcher_ID");

                    b.Property<int>("ScientificWorkId")
                        .HasColumnType("int")
                        .HasColumnName("Scientific_Work_ID");

                    b.HasKey("Id");

                    b.ToTable("Researcher_Work", (string)null);
                });

            modelBuilder.Entity("LibraryDomain.Model.ScientificWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Client_Address");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int")
                        .HasColumnName("Personnel_ID");

                    b.Property<int>("ResearcherId")
                        .HasColumnType("int")
                        .HasColumnName("Researcher_ID");

                    b.Property<string>("Subordination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Scientific_Works", (string)null);
                });

            modelBuilder.Entity("LibraryDomain.Model.Laboratory", b =>
                {
                    b.HasOne("LibraryDomain.Model.Department", "Departament")
                        .WithMany("Laboratories")
                        .HasForeignKey("DepartamentId")
                        .IsRequired()
                        .HasConstraintName("FK_Laboratories_Departments");

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("LibraryDomain.Model.Personnel", b =>
                {
                    b.HasOne("LibraryDomain.Model.Department", "IdNavigation")
                        .WithOne("Personnel")
                        .HasForeignKey("LibraryDomain.Model.Personnel", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Personnel_Departments");

                    b.HasOne("LibraryDomain.Model.Laboratory", "Laboratory")
                        .WithMany("Personnel")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Personnel_Laboratories");

                    b.HasOne("LibraryDomain.Model.Position", "Position")
                        .WithMany("Personnel")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_Personnel_Position");

                    b.Navigation("IdNavigation");

                    b.Navigation("Laboratory");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LibraryDomain.Model.ResearcherWork", b =>
                {
                    b.HasOne("LibraryDomain.Model.ScientificWork", "IdNavigation")
                        .WithOne("ResearcherWork")
                        .HasForeignKey("LibraryDomain.Model.ResearcherWork", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Researcher_Work_Scientific_Works1");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("LibraryDomain.Model.ScientificWork", b =>
                {
                    b.HasOne("LibraryDomain.Model.Personnel", "Personnel")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("PersonnelId")
                        .IsRequired()
                        .HasConstraintName("FK_Scientific_Works_Personnel");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("LibraryDomain.Model.Department", b =>
                {
                    b.Navigation("Laboratories");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("LibraryDomain.Model.Laboratory", b =>
                {
                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("LibraryDomain.Model.Personnel", b =>
                {
                    b.Navigation("ScientificWorks");
                });

            modelBuilder.Entity("LibraryDomain.Model.Position", b =>
                {
                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("LibraryDomain.Model.ScientificWork", b =>
                {
                    b.Navigation("ResearcherWork");
                });
#pragma warning restore 612, 618
        }
    }
}
